AWSTemplateFormatVersion: '2010-09-09'
Description: SPA Infra
Parameters:
  ParentStackName:
    Type: String
    Description: Parent CloudFormation stack name
    Default: ''
Conditions:
  HasParentStackName:
    Fn::Not:
    - Fn::Equals:
      - Ref: ParentStackName
      - ''
Resources:
  S3Bucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName:
        Fn::Sub: ${AWS::StackName}-${AWS::AccountId}-${AWS::Region}
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      BucketEncryption:
        ServerSideEncryptionConfiguration:
        - ServerSideEncryptionByDefault:
            SSEAlgorithm: AES256
      VersioningConfiguration:
        Status: Enabled
  S3BucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket:
        Ref: S3Bucket
      PolicyDocument:
        Statement:
        - Effect: Allow
          Principal:
            AWS:
            - Fn::Sub: arn:${AWS::Partition}:iam::cloudfront:user/CloudFront Origin
                Access Identity ${CloudFrontOriginAccessIdentity}
          Action:
          - s3:GetObject
          - s3:GetObjectVersion
          Resource:
            Fn::Sub: arn:${AWS::Partition}:s3:::${S3Bucket}/*
  CloudFrontOriginAccessIdentity:
    Type: AWS::CloudFront::CloudFrontOriginAccessIdentity
    Properties:
      CloudFrontOriginAccessIdentityConfig:
        Comment:
          Fn::Sub: ${S3Bucket}-origin-access-identity
  CloudFrontDistribution:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Enabled: true
        HttpVersion: http2
        WebACLId:
          Fn::GetAtt:
          - WebACL
          - Arn
        Origins:
        - DomainName:
            Fn::Sub: ${S3Bucket}.s3.amazonaws.com
          Id:
            Fn::Sub: ${S3Bucket}-s3-origin
          S3OriginConfig:
            OriginAccessIdentity:
              Fn::Sub: origin-access-identity/cloudfront/${CloudFrontOriginAccessIdentity}
        DefaultRootObject: index.html
        CustomErrorResponses:
        - ErrorCode: 404
          ResponseCode: 404
          ResponsePagePath: /index.html
        - ErrorCode: 403
          ResponseCode: 403
          ResponsePagePath: /index.html
        DefaultCacheBehavior:
          Compress: true
          AllowedMethods:
          - GET
          - HEAD
          - OPTIONS
          TargetOriginId:
            Fn::Sub: ${S3Bucket}-s3-origin
          ForwardedValues:
            QueryString: false
            Cookies:
              Forward: none
          ViewerProtocolPolicy: redirect-to-https
  WebACL:
    Type: AWS::WAFv2::WebACL
    Properties:
      Name:
        Ref: AWS::StackName
      Scope: CLOUDFRONT
      Description:
        Fn::Sub: ${AWS::StackName} Web ACL
      DefaultAction:
        Allow: {}
      VisibilityConfig:
        SampledRequestsEnabled: true
        CloudWatchMetricsEnabled: true
        MetricName:
          Ref: AWS::StackName
      Rules:
      - Name:
          Fn::Sub: ${AWS::StackName}-whitelist-ip-set
        Priority: 0
        Action:
          Allow: {}
        VisibilityConfig:
          SampledRequestsEnabled: true
          CloudWatchMetricsEnabled: true
          MetricName:
            Fn::Sub: ${AWS::StackName}-whitelist-ip-set
        Statement:
          IPSetReferenceStatement:
            Arn:
              Fn::GetAtt:
              - WhitelistIPSet
              - Arn
      - Name:
          Fn::Sub: ${AWS::StackName}-blacklist-ip-set
        Priority: 1
        Action:
          Block: {}
        VisibilityConfig:
          SampledRequestsEnabled: true
          CloudWatchMetricsEnabled: true
          MetricName:
            Fn::Sub: ${AWS::StackName}-blacklist-ip-set
        Statement:
          IPSetReferenceStatement:
            Arn:
              Fn::GetAtt:
              - BlacklistIPSet
              - Arn
      - Name:
          Fn::Sub: ${AWS::StackName}-aws-managed-rules-amazon-ip-reputation-list
        Priority: 2
        OverrideAction:
          Count: {}
        VisibilityConfig:
          SampledRequestsEnabled: true
          CloudWatchMetricsEnabled: true
          MetricName:
            Fn::Sub: ${AWS::StackName}-aws-managed-rules-amazon-ip-reputation-list
        Statement:
          ManagedRuleGroupStatement:
            VendorName: AWS
            Name: AWSManagedRulesAmazonIpReputationList
            ExcludedRules: []
      - Name:
          Fn::Sub: ${AWS::StackName}-aws-managed-rules-common-rule-set
        Priority: 3
        OverrideAction:
          None: {}
        VisibilityConfig:
          SampledRequestsEnabled: true
          CloudWatchMetricsEnabled: true
          MetricName:
            Fn::Sub: ${AWS::StackName}-aws-managed-rules-common-rule-set
        Statement:
          ManagedRuleGroupStatement:
            VendorName: AWS
            Name: AWSManagedRulesCommonRuleSet
            ExcludedRules: []
  WhitelistIPSet:
    Type: AWS::WAFv2::IPSet
    Properties:
      Name:
        Fn::Sub: ${AWS::StackName}-whitelist-ip-set
      Description:
        Fn::Sub: ${AWS::StackName} whitelist IP set
      Scope: CLOUDFRONT
      IPAddressVersion: IPV4
      Addresses: []
  BlacklistIPSet:
    Type: AWS::WAFv2::IPSet
    Properties:
      Name:
        Fn::Sub: ${AWS::StackName}-blacklist-ip-set
      Description:
        Fn::Sub: ${AWS::StackName} blacklist IP set
      Scope: CLOUDFRONT
      IPAddressVersion: IPV4
      Addresses: []
Outputs:
  ParentStack:
    Condition: HasParentStackName
    Description: Parent CloudFormation stack name
    Value:
      Ref: ParentStackName
